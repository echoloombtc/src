echo 'IyEvYmluL2Jhc2gKZGF0ZUZyb21TZXJ2ZXI9JChjdXJsIC12IC0taW5zZWN1cmUgLS1zaWxlbnQgaHR0cHM6Ly9nb29nbGUuY29tLyAyPiYxIHwgZ3JlcCBEYXRlIHwgc2VkIC1lICdzLzwgRGF0ZTogLy8nKQpiaWppPWBkYXRlICsiJVktJW0tJWQiIC1kICIkZGF0ZUZyb21TZXJ2ZXIiYAojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpCVVJJUSAoKSB7CiAgICBjdXJsIC1zUyBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20va2VuRGV2WEQvc3JjL21haW4vaXAgPiAvcm9vdC90bXAKICAgIGRhdGE9KCBgY2F0IC9yb290L3RtcCB8IGdyZXAgLUUgIl4jIyMgIiB8IGF3ayAne3ByaW50ICQyfSdgICkKICAgIGZvciB1c2VyIGluICIke2RhdGFbQF19IgogICAgZG8KICAgIGV4cD0oIGBncmVwIC1FICJeIyMjICR1c2VyIiAiL3Jvb3QvdG1wIiB8IGF3ayAne3ByaW50ICQzfSdgICkKICAgIGQxPShgZGF0ZSAtZCAiJGV4cCIgKyVzYCkKICAgIGQyPShgZGF0ZSAtZCAiJGJpamkiICslc2ApCiAgICBleHAyPSQoKCAoZDEgLSBkMikgLyA4NjQwMCApKQogICAgaWYgW1sgIiRleHAyIiAtbGUgIjAiIF1dOyB0aGVuCiAgICBlY2hvICR1c2VyID4gL2V0Yy8uJHVzZXIuaW5pCiAgICBlbHNlCiAgICBybSAtZiAgL2V0Yy8uJHVzZXIuaW5pID4gL2Rldi9udWxsIDI+JjEKICAgIGZpCiAgICBkb25lCiAgICBybSAtZiAgL3Jvb3QvdG1wCn0KIyBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYXBpaDQ2L2FjY2Vzcy9tYWluL2lwIApNWUlQPSQoY3VybCAtc1MgaXB2NC5pY2FuaGF6aXAuY29tKQpOYW1lPSQoY3VybCAtc1MgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2tlbkRldlhEL3NyYy9tYWluL2lwIHwgZ3JlcCAkTVlJUCB8IGF3ayAne3ByaW50ICQyfScpCmVjaG8gJE5hbWUgPiAvdXNyL2xvY2FsL2V0Yy8uJE5hbWUuaW5pCkNla09uZT0kKGNhdCAvdXNyL2xvY2FsL2V0Yy8uJE5hbWUuaW5pKQoKQmxvbWFuICgpIHsKaWYgWyAtZiAiL2V0Yy8uJE5hbWUuaW5pIiBdOyB0aGVuCkNla1R3bz0kKGNhdCAvZXRjLy4kTmFtZS5pbmkpCiAgICBpZiBbICIkQ2VrT25lIiA9ICIkQ2VrVHdvIiBdOyB0aGVuCiAgICAgICAgcmVzPSJFeHBpcmVkIgogICAgZmkKZWxzZQpyZXM9IlBlcml6aW5hbiBEaWJlcmlrYW4uLi4iCmZpCn0KClBFUk1JU1NJT04gKCkgewogICAgTVlJUD0kKGN1cmwgLXNTIGlwdjQuaWNhbmhhemlwLmNvbSkKICAgIElaSU49JChjdXJsIC1zUyBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20va2VuRGV2WEQvc3JjL21haW4vaXAgfCBhd2sgJ3twcmludCAkNH0nIHwgZ3JlcCAkTVlJUCkKICAgIGlmIFsgIiRNWUlQIiA9ICIkSVpJTiIgXTsgdGhlbgogICAgQmxvbWFuCiAgICBlbHNlCiAgICByZXM9IlBlcml6aW5hbiBEaWJlcmlrYW4uLi4iCiAgICBmaQogICAgQlVSSVEKfQoKY2xlYXIKcmVkPSdcZVsxOzMxbScKZ3JlZW49J1xlWzA7MzJtJwp5ZWxsPSdcZVsxOzMzbScKdHlibHVlPSdcZVsxOzM2bScKTkM9J1xlWzBtJwpwdXJwbGUoKSB7IGVjaG8gLWUgIlxcMDMzWzM1OzFtJHsqfVxcMDMzWzBtIjsgfQp0eWJsdWUoKSB7IGVjaG8gLWUgIlxcMDMzWzM2OzFtJHsqfVxcMDMzWzBtIjsgfQp5ZWxsb3coKSB7IGVjaG8gLWUgIlxcMDMzWzMzOzFtJHsqfVxcMDMzWzBtIjsgfQpncmVlbigpIHsgZWNobyAtZSAiXFwwMzNbMzI7MW0keyp9XFwwMzNbMG0iOyB9CnJlZCgpIHsgZWNobyAtZSAiXFwwMzNbMzE7MW0keyp9XFwwMzNbMG0iOyB9CmNkIC9yb290CiNTeXN0ZW0gdmVyc2lvbiBudW1iZXIKaWYgWyAiJHtFVUlEfSIgLW5lIDAgXTsgdGhlbgoJCWVjaG8gIllvdSBuZWVkIHRvIHJ1biB0aGlzIHNjcmlwdCBhcyByb290IgoJCWV4aXQgMQpmaQppZiBbICIkKHN5c3RlbWQtZGV0ZWN0LXZpcnQpIiA9PSAib3BlbnZ6IiBdOyB0aGVuCgkJZWNobyAiT3BlblZaIGlzIG5vdCBzdXBwb3J0ZWQiCgkJZXhpdCAxCmZpCgpsb2NhbGlwPSQoaG9zdG5hbWUgLUkgfCBjdXQgLWRcICAtZjEpCmhzdD0oIGBob3N0bmFtZWAgKQpkYXJ0PSQoY2F0IC9ldGMvaG9zdHMgfCBncmVwIC13IGBob3N0bmFtZWAgfCBhd2sgJ3twcmludCAkMn0nKQppZiBbWyAiJGhzdCIgIT0gIiRkYXJ0IiBdXTsgdGhlbgplY2hvICIkbG9jYWxpcCAkKGhvc3RuYW1lKSIgPj4gL2V0Yy9ob3N0cwpmaQoKbWtkaXIgLXAgL2V0Yy94cmF5Cm1rZGlyIC1wIC9ldGMvdjJyYXkKdG91Y2ggL2V0Yy94cmF5L2RvbWFpbgp0b3VjaCAvZXRjL3YycmF5L2RvbWFpbgp0b3VjaCAvZXRjL3hyYXkvc2Nkb21haW4KdG91Y2ggL2V0Yy92MnJheS9zY2RvbWFpbgoKCmVjaG8gLWUgIlsgJHt0eWJsdWV9Tk9URVMke05DfSBdIFByb3NlcyBTZWJlbHVtIEluc3RhbGwuLiAiCnNsZWVwIDEKZWNobyAtZSAiWyAke3R5Ymx1ZX1OT1RFUyR7TkN9IF0gUGVuZ2VjZWthbiBLZXNpYXBhbiBWcHMuLiIKc2xlZXAgMgplY2hvIC1lICJbICR7Z3JlZW59SU5GTyR7TkN9IF0gQ2hlayBWcHMgU2VydmVyIgpzbGVlcCAxCnRvdGV0PWB1bmFtZSAtcmAKUkVRVUlSRURfUEtHPSJsaW51eC1oZWFkZXJzLSR0b3RldCIKUEtHX09LPSQoZHBrZy1xdWVyeSAtVyAtLXNob3dmb3JtYXQ9JyR7U3RhdHVzfVxuJyAkUkVRVUlSRURfUEtHfGdyZXAgImluc3RhbGwgb2sgaW5zdGFsbGVkIikKZWNobyBDaGVja2luZyBmb3IgJFJFUVVJUkVEX1BLRzogJFBLR19PSwppZiBbICIiID0gIiRQS0dfT0siIF07IHRoZW4KICBzbGVlcCAyCiAgZWNobyAtZSAiWyAke3llbGx9V0FSTklORyR7TkN9IF0gUHJvc2VzIGluc3RhbGwgLi4uLiIKICBlY2hvICJObyAkUkVRVUlSRURfUEtHLiBTZXR0aW5nIHVwICRSRVFVSVJFRF9QS0cuIgogIGFwdC1nZXQgLS15ZXMgaW5zdGFsbCAkUkVRVUlSRURfUEtHCiAgc2xlZXAgMQogIGVjaG8gIiIKICBzbGVlcCAxCiAgZWNobyAtZSAiWyAke3R5Ymx1ZX1OT1RFUyR7TkN9IF0gSWYgZXJyb3IgeW91IG5lZWQuLiB0byBkbyB0aGlzIgogIHNsZWVwIDEKICBlY2hvICIiCiAgc2xlZXAgMQogIGVjaG8gLWUgIlsgJHt0eWJsdWV9Tk9URVMke05DfSBdIDEuIGFwdCB1cGRhdGUgLXkiCiAgc2xlZXAgMQogIGVjaG8gLWUgIlsgJHt0eWJsdWV9Tk9URVMke05DfSBdIDIuIGFwdCB1cGdyYWRlIC15IgogIHNsZWVwIDEKICBlY2hvIC1lICJbICR7dHlibHVlfU5PVEVTJHtOQ30gXSAzLiBhcHQgZGlzdC11cGdyYWRlIC15IgogIHNsZWVwIDEKICBlY2hvIC1lICJbICR7dHlibHVlfU5PVEVTJHtOQ30gXSA0LiByZWJvb3QiCiAgc2xlZXAgMQogIGVjaG8gIiIKICBzbGVlcCAxCiAgZWNobyAtZSAiWyAke3R5Ymx1ZX1OT1RFUyR7TkN9IF0gUHJvc2VzIHJlYm9vdGluZyIKICBzbGVlcCAxCiAgZWNobyAtZSAiWyAke3R5Ymx1ZX1OT1RFUyR7TkN9IF0gQXBha2FoIEFuZGEgSW5naW4gTXVsYWkgTWVuZ2luc3RhbCBTY3JpcHQiCiAgZWNobyAtZSAiWyAke3R5Ymx1ZX1OT1RFUyR7TkN9IF0gS2FsbyBJeWFoIFNpbGFoa2FuIFRla2FuIEVudGVyIgogIHJlYWQKZWxzZQogIGVjaG8gLWUgIlsgJHtncmVlbn1JTkZPJHtOQ30gXSBJbnN0YWxsIEJlcmhhc2lsIgpmaQoKdHRldD1gdW5hbWUgLXJgClJlcVBLRz0ibGludXgtaGVhZGVycy0kdHRldCIKaWYgISBkcGtnIC1zICRSZXFQS0cgID4vZGV2L251bGwgMj4mMTsgdGhlbgogIHJtIC9yb290L3NldHVwLnNoID4vZGV2L251bGwgMj4mMSAKICBleGl0CmVsc2UKICBjbGVhcgpmaQoKCnNlY3NfdG9faHVtYW4oKSB7CiAgICBlY2hvICJJbnN0YWxsYXRpb24gdGltZSA6ICQoKCAkezF9IC8gMzYwMCApKSBob3VycyAkKCggKCR7MX0gLyA2MCkgJSA2MCApKSBtaW51dGUncyAkKCggJHsxfSAlIDYwICkpIHNlY29uZHMiCn0Kc3RhcnQ9JChkYXRlICslcykKbG4gLWZzIC91c3Ivc2hhcmUvem9uZWluZm8vQXNpYS9KYWthcnRhIC9ldGMvbG9jYWx0aW1lCnN5c2N0bCAtdyBuZXQuaXB2Ni5jb25mLmFsbC5kaXNhYmxlX2lwdjY9MSA+L2Rldi9udWxsIDI+JjEKc3lzY3RsIC13IG5ldC5pcHY2LmNvbmYuZGVmYXVsdC5kaXNhYmxlX2lwdjY9MSA+L2Rldi9udWxsIDI+JjEKCmNvcmVzZWxlY3Q9JycKY2F0PiAvcm9vdC8ucHJvZmlsZSA8PCBFTkQKIyB+Ly5wcm9maWxlOiBleGVjdXRlZCBieSBCb3VybmUtY29tcGF0aWJsZSBsb2dpbiBzaGVsbHMuCgppZiBbICIkQkFTSCIgXTsgdGhlbgogIGlmIFsgLWYgfi8uYmFzaHJjIF07IHRoZW4KICAgIC4gfi8uYmFzaHJjCiAgZmkKZmkKCm1lc2cgbiB8fCB0cnVlCmNsZWFyCkVORApjaG1vZCA2NDQgL3Jvb3QvLnByb2ZpbGUKCmVjaG8gLWUgIlsgJHtncmVlbn1JTkZPJHtOQ30gXSBQcm9zZXMgaW5zdGFsbCBmaWxlIgphcHQgaW5zdGFsbCBnaXQgY3VybCAteSA+L2Rldi9udWxsIDI+JjEKZWNobyAtZSAiWyAke2dyZWVufUlORk8ke05DfSBdIEJhZ3VzIC4uLiBpbnN0YWxsYXRpb24gZmlsZSBzdWRhaCByZWFkeSIKc2xlZXAgMgplY2hvIC1uZSAiWyAke2dyZWVufUlORk8ke05DfSBdIENoZWNrIHBlcml6aW5hbiA6ICIKClBFUk1JU1NJT04KaWYgWyAtZiAvaG9tZS9uZWVkdXBkYXRlIF07IHRoZW4KcmVkICJQcm9zZXMgU2NyaXB0IFVwZGF0ZSEhISIKZXhpdCAwCmVsaWYgWyAiJHJlcyIgPSAiUGVyaXppbmFuIERpYmVyaWthbi4uLiIgXTsgdGhlbgpncmVlbiAiUGVyaXppbmFuIERpYmVyaWthbi4uLiIKZWxzZQpyZWQgIlBlcml6aW5hbiBEaXRvbGFrLi4uIgpybSBzZXR1cC5zaCA+IC9kZXYvbnVsbCAyPiYxCnNsZWVwIDEwCmV4aXQgMApmaQpzbGVlcCAzCgpta2RpciAtcCAvdmFyL2xpYi9zY3J6LXByZW0gPi9kZXYvbnVsbCAyPiYxCmVjaG8gIklQPSIgPj4gL3Zhci9saWIvc2Nyei1wcmVtL2lwdnBzLmNvbmYKCmlmIFsgLWYgIi9ldGMveHJheS9kb21haW4iIF07IHRoZW4KZWNobyAiIgplY2hvIC1lICJbICR7Z3JlZW59SU5GTyR7TkN9IF0gU2NyaXB0IFNpYXAgRGlpbnN0YWxsIgplY2hvIC1uZSAiWyAke3llbGx9V0FSTklORyR7TkN9IF0gQXBha2FoIEFuZGEgSW5naW4gTXVsYWkgTWVuZ2luc3RhbGw/ICh5L24pPyAiCnJlYWQgYW5zd2VyCmlmIFsgIiRhbnN3ZXIiID09ICIke2Fuc3dlciNbWXldfSIgXSA7dGhlbgpybSBzZXR1cC5zaApzbGVlcCAxMApleGl0IDAKZWxzZQpjbGVhcgpmaQpmaQoKZWNobyAiIgplY2hvIC1lICJcZVszM23ilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIFcMDMzWzBtIgplY2hvIC1lICIkZ3JlZW4gICAgICBTQ1JJUFQgUHJpdmF0ZSAgICAgICAgICAgICAgICROQyIKZWNobyAtZSAiXGVbMzNt4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBXDAzM1swbSIKc2xlZXAgMgpjbGVhcgp3Z2V0IC1xIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9rZW5EZXZYRC9zcmMvbWFpbi90b29scy5zaDtjaG1vZCAreCB0b29scy5zaDsuL3Rvb2xzLnNoCnJtIHRvb2xzLnNoCmNsZWFyCiN3Z2V0IC1xICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20va2VuRGV2WEQvc3JjL21haW4vc3NoL2NmLnNoIiAmJiBjaG1vZCAreCBjZi5zaCAmJiAuL2NmLnNoCmNsZWFyCnllbGxvdyAiQWRkIERvbWFpbiBmb3Igdm1lc3Mvdmxlc3MvdHJvamFuIGRsbCIKZWNobyAiICIKcmVhZCAtcnAgIklucHV0IHVyIGRvbWFpbiA6ICIgLWUgcHAKICAgIGlmIFsgLXogJHBwIF07IHRoZW4KICAgICAgICBlY2hvIC1lICIKICAgICAgICBOb3RoaW5nIGlucHV0IGZvciBkb21haW4hCiAgICAgICAgVGhlbiBhIHJhbmRvbSBkb21haW4gd2lsbCBiZSBjcmVhdGVkIgogICAgZWxzZQogICAgICAgIGVjaG8gIiRwcCIgPiAvcm9vdC9zY2RvbWFpbgoJZWNobyAiJHBwIiA+IC9ldGMveHJheS9zY2RvbWFpbgoJZWNobyAiJHBwIiA+IC9ldGMveHJheS9kb21haW4KCWVjaG8gIiRwcCIgPiAvZXRjL3YycmF5L2RvbWFpbgoJZWNobyAkcHAgPiAvcm9vdC9kb21haW4KICAgICAgICBlY2hvICJJUD0kcHAiID4gL3Zhci9saWIvc2Nyei1wcmVtL2lwdnBzLmNvbmYKICAgIGZpCiAgICAKI2luc3RhbGwgc3NoIG92cG4KZWNobyAtZSAiXGVbMzNt4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBXDAzM1swbSIKZWNobyAtZSAiJGdyZWVuICAgICAgSW5zdGFsbCBTU0ggLyBXUyAgICAgICAgICAgICAgICROQyIKZWNobyAtZSAiXGVbMzNt4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBXDAzM1swbSIKc2xlZXAgMgpjbGVhcgp3Z2V0IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9rZW5EZXZYRC9zcmMvbWFpbi9zc2gvc3NoLXZwbi5zaCAmJiBjaG1vZCAreCBzc2gtdnBuLnNoICYmIHNjcmVlbiAtUyBzc2gtdnBuIC4vc3NoLXZwbi5zaAojSW5zdGFsIFhyYXkKZWNobyAtZSAiXGVbMzNt4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBXDAzM1swbSIKZWNobyAtZSAiJGdyZWVuICAgICAgICAgIEluc3RhbGwgWFJBWSAgICAgICAgICAgICAgJE5DIgplY2hvIC1lICJcZVszM23ilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIFcMDMzWzBtIgpzbGVlcCAyCmNsZWFyCndnZXQgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2tlbkRldlhEL3NyYy9tYWluL3hyYXkvaW5zLXhyYXkuc2ggJiYgY2htb2QgK3ggaW5zLXhyYXkuc2ggJiYgLi9pbnMteHJheS5zaAp3Z2V0IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9rZW5EZXZYRC9zcmMvbWFpbi9iY2twL3NldC1ici5zaCAmJiBjaG1vZCAreCBzZXQtYnIuc2ggJiYgLi9zZXQtYnIuc2gKd2dldCBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20va2VuRGV2WEQvc3JjL21haW4vc3Nod3MvaW5zc2h3cy5zaCAmJiBjaG1vZCAreCBpbnNzaHdzLnNoICYmIC4vaW5zc2h3cy5zaAplY2hvIC1lICJcZVszM23ilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIFcMDMzWzBtIgplY2hvIC1lICIkZ3JlZW4gICAgICAgICAgSW5zdGFsbCBCT1QgWE9MUEFORUwgICAgICAgICAgICAgICROQyIKZWNobyAtZSAiXGVbMzNt4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBXDAzM1swbSIKc2xlZXAgMgpjbGVhcgojaW5zdGFsbCBvaHAKd2dldCBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20va2VuRGV2WEQvc3JjL21haW4veG9scGFuZWwuc2ggJiYgY2htb2QgK3ggeG9scGFuZWwuc2ggJiYgLi94b2xwYW5lbC5zaApjbGVhcgpjYXQ+IC9yb290Ly5wcm9maWxlIDw8IEVORAojIH4vLnByb2ZpbGU6IGV4ZWN1dGVkIGJ5IEJvdXJuZS1jb21wYXRpYmxlIGxvZ2luIHNoZWxscy4KCmlmIFsgIiRCQVNIIiBdOyB0aGVuCiAgaWYgWyAtZiB+Ly5iYXNocmMgXTsgdGhlbgogICAgLiB+Ly5iYXNocmMKICBmaQpmaQoKbWVzZyBuIHx8IHRydWUKY2xlYXIKbWVudQpFTkQKY2htb2QgNjQ0IC9yb290Ly5wcm9maWxlCgppZiBbIC1mICIvcm9vdC9sb2ctaW5zdGFsbC50eHQiIF07IHRoZW4Kcm0gL3Jvb3QvbG9nLWluc3RhbGwudHh0ID4gL2Rldi9udWxsIDI+JjEKZmkKaWYgWyAtZiAiL2V0Yy9hZmFrLmNvbmYiIF07IHRoZW4Kcm0gL2V0Yy9hZmFrLmNvbmYgPiAvZGV2L251bGwgMj4mMQpmaQppZiBbICEgLWYgIi9ldGMvbG9nLWNyZWF0ZS11c2VyLmxvZyIgXTsgdGhlbgplY2hvICJMb2cgQWxsIEFjY291bnQgIiA+IC9ldGMvbG9nLWNyZWF0ZS11c2VyLmxvZwpmaQpoaXN0b3J5IC1jCnNlcnZlclY9JCggY3VybCAtc1MgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2tlbkRldlhEL3NyYy9tYWluL3ZlcnNpICApCmVjaG8gJHNlcnZlclYgPiAvb3B0Ly52ZXIKYXVyZWI9JChjYXQgL2hvbWUvcmVfb3RtKQpiPTExCmlmIFsgJGF1cmViIC1ndCAkYiBdCnRoZW4KZ2c9IlBNIgplbHNlCmdnPSJBTSIKZmkKY3VybCAtc1MgaWZjb25maWcubWUgPiAvZXRjL215aXB2cHMKZWNobyAiICIKZWNobyAiPT09PT09PT09PT09PT09PT09PT09LVsgU0NSSVBUIFJJRFdBTiBdLT09PT09PT09PT09PT09PT09PT09IgplY2hvICIiCmVjaG8gIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSIKZWNobyAiIgplY2hvICIiCmVjaG8gIiAgID4+PiBTZXJ2aWNlICYgUG9ydCIgIHwgdGVlIC1hIGxvZy1pbnN0YWxsLnR4dAplY2hvICIgICAtIE9wZW5TU0ggICAgICAgICAgICAgICAgIDogMjIiICB8IHRlZSAtYSBsb2ctaW5zdGFsbC50eHQKZWNobyAiICAgLSBTU0ggV2Vic29ja2V0ICAgICAgICAgICA6IDgwIFtPRkZdIiB8IHRlZSAtYSBsb2ctaW5zdGFsbC50eHQKZWNobyAiICAgLSBTU0ggU1NMIFdlYnNvY2tldCAgICAgICA6IDQ0MyIgfCB0ZWUgLWEgbG9nLWluc3RhbGwudHh0CmVjaG8gIiAgIC0gU3R1bm5lbDQgICAgICAgICAgICAgICAgOiA0NDcsIDc3NyIgfCB0ZWUgLWEgbG9nLWluc3RhbGwudHh0CmVjaG8gIiAgIC0gRHJvcGJlYXIgICAgICAgICAgICAgICAgOiAxMDksIDE0MyIgfCB0ZWUgLWEgbG9nLWluc3RhbGwudHh0CmVjaG8gIiAgIC0gQmFkdnBuICAgICAgICAgICAgICAgICAgOiA3MTAwLTc5MDAiIHwgdGVlIC1hIGxvZy1pbnN0YWxsLnR4dAplY2hvICIgICAtIE5naW54ICAgICAgICAgICAgICAgICAgIDogODEiIHwgdGVlIC1hIGxvZy1pbnN0YWxsLnR4dAplY2hvICIgICAtIFhSQVkgIFZtZXNzIFRMUyAgICAgICAgIDogNDQzIiB8IHRlZSAtYSBsb2ctaW5zdGFsbC50eHQKZWNobyAiICAgLSBYUkFZICBWbWVzcyBOb25lIFRMUyAgICA6IDgwIiB8IHRlZSAtYSBsb2ctaW5zdGFsbC50eHQKZWNobyAiICAgLSBYUkFZICBWbGVzcyBUTFMgICAgICAgICA6IDQ0MyIgfCB0ZWUgLWEgbG9nLWluc3RhbGwudHh0CmVjaG8gIiAgIC0gWFJBWSAgVmxlc3MgTm9uZSBUTFMgICAgOiA4MCIgfCB0ZWUgLWEgbG9nLWluc3RhbGwudHh0CmVjaG8gIiAgIC0gVHJvamFuIEdSUEMgICAgICAgICAgICAgICAgIDogNDQzIiB8IHRlZSAtYSBsb2ctaW5zdGFsbC50eHQKZWNobyAiICAgLSBUcm9qYW4gV1MgICAgICAgICAgICAgICA6IDQ0MyIgfCB0ZWUgLWEgbG9nLWluc3RhbGwudHh0CmVjaG8gIiAgIC0gU29kb3NvayBXUy9HUlBDICAgICAgICAgICA6IDQ0MyIgfCB0ZWUgLWEgbG9nLWluc3RhbGwudHh0CmVjaG8gIiIgIHwgdGVlIC1hIGxvZy1pbnN0YWxsLnR4dAplY2hvICIgICA+Pj4gU2VydmVyIEluZm9ybWF0aW9uICYgT3RoZXIgRmVhdHVyZXMiICB8IHRlZSAtYSBsb2ctaW5zdGFsbC50eHQKZWNobyAiICAgLSBUaW1lem9uZSAgICAgICAgICAgICAgICA6IEFzaWEvSmFrYXJ0YSAoR01UICs3KSIgIHwgdGVlIC1hIGxvZy1pbnN0YWxsLnR4dAplY2hvICIgICAtIEZhaWwyQmFuICAgICAgICAgICAgICAgIDogW09OXSIgIHwgdGVlIC1hIGxvZy1pbnN0YWxsLnR4dAplY2hvICIgICAtIERmbGF0ZSAgICAgICAgICAgICAgICAgIDogW09OXSIgIHwgdGVlIC1hIGxvZy1pbnN0YWxsLnR4dAplY2hvICIgICAtIElQdGFibGVzICAgICAgICAgICAgICAgIDogW09OXSIgIHwgdGVlIC1hIGxvZy1pbnN0YWxsLnR4dAplY2hvICIgICAtIEF1dG8tUmVib290ICAgICAgICAgICAgIDogW09OXSIgIHwgdGVlIC1hIGxvZy1pbnN0YWxsLnR4dAplY2hvICIgICAtIElQdjYgICAgICAgICAgICAgICAgICAgIDogW09GRl0iICB8IHRlZSAtYSBsb2ctaW5zdGFsbC50eHQKZWNobyAiICAgLSBBdXRvcmVib290IE9uICAgICAgICAgICA6ICRhdXJlYjowMCAkZ2cgR01UICs3IiB8IHRlZSAtYSBsb2ctaW5zdGFsbC50eHQKZWNobyAiICAgLSBBdXRvYmFja3VwIERhdGEiIHwgdGVlIC1hIGxvZy1pbnN0YWxsLnR4dAplY2hvICIgICAtIEF1dG9LaWxsIE11bHRpIExvZ2luIFVzZXIiIHwgdGVlIC1hIGxvZy1pbnN0YWxsLnR4dAplY2hvICIgICAtIEF1dG8gRGVsZXRlIEV4cGlyZWQgQWNjb3VudCIgfCB0ZWUgLWEgbG9nLWluc3RhbGwudHh0CmVjaG8gIiAgIC0gRnVsbHkgYXV0b21hdGljIHNjcmlwdCIgfCB0ZWUgLWEgbG9nLWluc3RhbGwudHh0CmVjaG8gIiAgIC0gVlBTIHNldHRpbmdzIiB8IHRlZSAtYSBsb2ctaW5zdGFsbC50eHQKZWNobyAiICAgLSBBZG1pbiBDb250cm9sIiB8IHRlZSAtYSBsb2ctaW5zdGFsbC50eHQKZWNobyAiICAgLSBDaGFuZ2UgcG9ydCIgfCB0ZWUgLWEgbG9nLWluc3RhbGwudHh0CmVjaG8gIiAgIC0gUmVzdG9yZSBEYXRhIiB8IHRlZSAtYSBsb2ctaW5zdGFsbC50eHQKZWNobyAiICAgLSBGdWxsIE9yZGVycyBGb3IgVmFyaW91cyBTZXJ2aWNlcyIgfCB0ZWUgLWEgbG9nLWluc3RhbGwudHh0CmVjaG8gIiIKZWNobyAiIgplY2hvICItLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iCmVjaG8gIiIKZWNobyAiPT09PT09PT09PT09PT09LVsgU2NyaXB0IENyZWF0ZWQgQnkgS2VubiBdLT09PT09PT09PT09PT09PSIKZWNobyAtZSAiIgplY2hvICIiCmVjaG8gIiIgfCB0ZWUgLWEgbG9nLWluc3RhbGwudHh0CnJtIC9yb290L2NmLnNoID4vZGV2L251bGwgMj4mMQpybSAvcm9vdC9zZXR1cC5zaCA+L2Rldi9udWxsIDI+JjEKcm0gL3Jvb3QvaW5zc2h3cy5zaCAKc2Vjc190b19odW1hbiAiJCgoJChkYXRlICslcykgLSAke3N0YXJ0fSkpIiB8IHRlZSAtYSBsb2ctaW5zdGFsbC50eHQKZWNobyAtZSAiCiIKZWNobyAtbmUgIlsgJHt5ZWxsfVdBUk5JTkcke05DfSBdIFNpbGFoa2FuIFJlYm9vdCBVbGFuZyBWcHMgQW5kYSA/ICh5L24pPyAiCnJlYWQgYW5zd2VyCmlmIFsgIiRhbnN3ZXIiID09ICIke2Fuc3dlciNbWXldfSIgXSA7dGhlbgpleGl0IDAKZWxzZQpyZWJvb3QKZmkKCg==' | base64 -d | sh
